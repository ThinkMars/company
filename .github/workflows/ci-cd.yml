# CI/CD 流水线配置
name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      package:
        description: "select package to build"
        required: true
        type: choice
        options:
          - want-chat
          - manager
          - all
        default: all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-dependencies
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install

      - name: Build
        run: |
          if [ "${{ inputs.package }}" == "all" ]; then
            pnpm --filter "want-chat" build
            pnpm --filter "manager" build
          else
            pnpm --filter ${{ inputs.package }} build
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.package }}-dist
          path: packages/${{ inputs.package }}/dist
          retention-days: 7

    outputs:
      cache-hit: ${{ steps.cache-dependencies.outputs.cache-hit }}

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.package }}-dist
          path: packages/${{ inputs.package }}/dist

      - name: Build Docker Images
        run: |
          if [ "${{ inputs.package }}" == "all" ]; then
            docker build -t want-chat:${{ github.sha }} packages/want-chat
            docker build -t manager:${{ github.sha }} packages/manager
          else
            docker build -t ${{ inputs.package }}:${{ github.sha }} packages/${{ inputs.package }}
          fi

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Images
        run: |
          if [ "${{ inputs.package }}" == "all" ]; then
            docker tag want-chat:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/want-chat:latest
            docker tag manager:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/manager:latest
            docker push ${{ secrets.DOCKER_REGISTRY }}/want-chat:latest
            docker push ${{ secrets.DOCKER_REGISTRY }}/manager:latest
          else
            docker tag ${{ inputs.package }}:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/${{ inputs.package }}:latest
            docker push ${{ secrets.DOCKER_REGISTRY }}/${{ inputs.package }}:latest
          fi

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USER }}
          key: ${{ secrets.ALIYUN_SSH_KEY }}
          script: |
            cd /docker/
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found"
              exit 1
            fi
            if [ "${{ inputs.package }}" == "all" ]; then
              docker-compose stop want-chat manager && docker-compose rm -f want-chat manager
              docker rmi -f ${{ secrets.DOCKER_REGISTRY }}/want-chat:latest ${{ secrets.DOCKER_REGISTRY }}/manager:latest
              
              docker pull ${{ secrets.DOCKER_REGISTRY }}/want-chat:latest
              docker pull ${{ secrets.DOCKER_REGISTRY }}/manager:latest
            else
              docker-compose stop ${{ inputs.package }} && docker-compose rm -f ${{ inputs.package }}
              docker rmi -f ${{ secrets.DOCKER_REGISTRY }}/${{ inputs.package }}:latest
              docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ inputs.package }}:latest
            fi

            docker-compose up -d

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Notify
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deploy Success!"
            echo "Package: ${{ inputs.package }}"
            if [ "${{ inputs.package }}" == "all" ]; then
              echo "Docker Images:"
              echo "- ${{ secrets.DOCKER_REGISTRY }}/want-chat:latest"
              echo "- ${{ secrets.DOCKER_REGISTRY }}/manager:latest"
            else
              echo "Docker Image: ${{ secrets.DOCKER_REGISTRY }}/${{ inputs.package }}:latest"
            fi
          else
            echo "❌ Deploy Failed!"
            echo "Package: ${{ inputs.package }}"
          fi
